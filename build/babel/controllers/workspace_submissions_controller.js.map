{"version":3,"sources":["../../../app/controllers/workspace_submissions_controller.js"],"names":["Encompass","WorkspaceSubmissionsController","Ember","Controller","extend","workspace","inject","controller","comments","workspaceSubmission","sortProperties","manyRevisions","computed","gte","showStudents","firstSubmission","alias","firstThread","currentSubmission","currentStudent","lastSubmission","lastThread","currentSelection","oneWay","submissionThreads","threads","Map","create","get","sortBy","getEach","uniq","forEach","student","has","submissions","studentWork","set","property","submissionThreadHeads","pointers","pushObject","currentThread","currentRevisions","dateTime","thread","revisions","map","submission","index","label","moment","format","revision","filterBy","prevThread","prevIndex","indexOf","prev","objectAt","currentSubmissionIndex","usersSubmissionIndex","nextThread","nextIndex","next","actions","toggleStudentList","showAllRevisions"],"mappings":"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","file":"workspace_submissions_controller.js","sourcesContent":["/**\n  * # Workspace Submissions Controller\n  * @description The controller for interacting with submissions in a workspace\n  *              This is used to set the dependency on the workspace controller and add and delete\n  *              selections \n  * @author Amir Tahvildaran <amir@mathforum.org>, Damola Mabogunje <damola@mathforum.org>\n  * @since 1.0.1\n*/\nEncompass.WorkspaceSubmissionsController = Ember.Controller.extend({\n  workspace: Ember.inject.controller(),\n  comments: Ember.inject.controller(),\n  workspaceSubmission: Ember.inject.controller(),\n\n  sortProperties: ['student', 'createDate'],\n  manyRevisions: Ember.computed.gte('currentRevisions.length', 10),\n  showStudents: false,\n\n  firstSubmission: Ember.computed.alias('recentSubmissions.firstObject'),\n  firstThread: Ember.computed.alias('submissionThreadHeads.firstObject'),\n  currentSubmission: Ember.computed.alias('workspaceSubmission.model'),\n  currentStudent: Ember.computed.alias('currentSubmission.student'),\n  lastSubmission: Ember.computed.alias('recentSubmissions.lastObject'),\n  lastThread: Ember.computed.alias('submissionThreadHeads.lastObject'),\n  currentSelection: Ember.computed.oneWay('workspace.selections.firstObject'),\n \n  //TODO Use the new thread.threadId property on submissions\n  submissionThreads: function() {\n    var controller = this;\n    var threads = Ember.Map.create();\n    \n    controller.get('content')\n      .sortBy('student')\n      .getEach('student')\n      .uniq()\n      .forEach(function(student) {\n        if(!threads.has(student)) {\n          var submissions = controller.studentWork(student);\n          /*\n          var thread = {\n            id: submissions.get('lastObject.threadId'),\n            head: submissions.get('lastObject'),\n            student: student,\n            revisions: submissions,\n          };*/\n\n          threads.set(student, submissions);\n        }\n      });\n\n    return threads;\n  }.property('content.[]'),\n\n  submissionThreadHeads: function() {\n    var pointers = [];\n    var threads = this.get('submissionThreads');\n\n    threads.forEach(function(student) {\n      pointers.pushObject(threads.get(student).get('lastObject')); //this here refers to the map\n    });\n\n    return pointers;\n  }.property('submissionThreads.[]'),\n\n  currentThread: function() {\n    return this.get('submissionThreads')\n      .get( this.get('currentStudent') );\n  }.property('currentSubmission'),\n\n  currentRevisions: function() {\n    var dateTime  = 'l h:mm';\n    var thread    = this.get('currentThread');\n    var revisions = [];\n\n    if(thread) {\n      revisions = thread.map(function(submission, index, thread) { \n        return {\n          index: index+1, // Because arrays are zero-indexed\n          label: moment(submission.get('createDate')).format(dateTime),\n          revision: submission,\n          thread: thread.get('lastObject')\n        };\n      });\n    }\n\n    return revisions;\n  }.property('currentThread'),\n\n  studentWork: function(student) {\n    var submissions = this.get('arrangedContent')\n                    .filterBy('student', student)\n                    .sortBy('createDate');\n\n    return submissions;\n  },\n\n  prevThread: function() {\n    var thread = this.get('currentThread.lastObject');\n\n    if(thread === this.get('firstThread')) {\n      return this.get('lastThread');\n    }\n\n    var prevIndex = this.get('submissionThreadHeads').indexOf(thread) - 1;\n    var prev = this.get('submissionThreadHeads').objectAt(prevIndex);\n\n    return prev;\n  }.property('currentThread', 'firstThread'),\n\n  currentSubmissionIndex: function() {\n    return this.get('arrangedContent').indexOf(this.get('currentSubmission'));\n  }.property('currentSubmission', 'currentThread', 'arrangedContent'), \n\n  usersSubmissionIndex: function() {\n    return this.get('currentSubmissionIndex') + 1;\n  }.property('currentSubmissionIndex'),\n\n  nextThread: function() {\n    var thread = this.get('currentThread.lastObject');\n\n    if(thread === this.get('lastThread')) {\n      return this.get('firstThread');\n    }\n\n    var nextIndex = this.get('submissionThreadHeads').indexOf(thread) + 1;\n    var next = this.get('submissionThreadHeads').objectAt(nextIndex);\n\n    return next;\n  }.property('currentSubmission', 'currentThread', 'lastThread'),\n\n  actions: {\n    toggleStudentList: function() {\n      this.set('showStudents', !this.get('showStudents'));\n    },\n\n    showAllRevisions: function() {\n      this.set('manyRevisions', false);\n    }\n\n  }\n});\n"]}