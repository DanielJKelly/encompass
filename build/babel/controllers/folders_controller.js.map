{"version":3,"sources":["../../../app/controllers/folders_controller.js"],"names":["Encompass","FoldersController","Ember","Controller","extend","CurrentUserMixin","workspace","inject","controller","currentWorkspace","computed","alias","sortProperties","weighting","canManageFolders","Permissions","userCan","get","property","filteredContent","filterProperty","sortedContent","ArrayProxy","createWithMixins","SortableMixin","content","siblings","folder","above","parentID","weight","workspaceFolders","filterBy","sortBy","pos","indexOf","siblingsAbove","slice","siblingsBelow","length","actions","activateEditFolderMode","set","cancelEditFolderMode","putInFolder","type","obj","workspaceController","error","run","send","propertyWillChange","propertyDidChange","console","info","fmt","putInWorkspace","moveUp","anchor","min","save","forEach","sibling","index","w","moveDown","max","moveOut","parent","newParent","copy","removeObject","isNone","addObject","editFolderName","log"],"mappings":"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","file":"folders_controller.js","sourcesContent":["/**\n  * # Folders Controller\n  * @description The overarching controller for working with folders. \n  *              Currently used in workspace route for folders template\n  * @todo Clean up folder move logic \n  * @authors Damola Mabogunje <damola@mathforum.org>, Amir Tahvildaran <amir@mathforum.org>, Jon Hopkins <jrh327@drexel.edu>\n  * @since 1.0.0\n  */\nEncompass.FoldersController = Ember.Controller.extend(Encompass.CurrentUserMixin, {\n  workspace: Ember.inject.controller(),\n  currentWorkspace: Ember.computed.alias('workspace.model'),\n  sortProperties: ['weight', 'data.name'],\n  weighting: 1,\n\n  canManageFolders: function() {\n    return Permissions.userCan(\n      this.get('currentUser'),\n      this.get('currentWorkspace'),\n      \"FOLDERS\"\n    );\n  }.property('currentUser', 'currentWorkspace.owner', 'currentWorkspace.editors.[].username'),\n\n  filteredContent: function() {\n    var filteredContent = this.get('content')\n      .filterProperty('isTrashed', false)\n      .filterProperty('parent', null);\n\n    var sortedContent = Ember.ArrayProxy.createWithMixins(Ember.SortableMixin,\n      { content: filteredContent, sortProperties: this.sortProperties });\n    return sortedContent;\n  }.property('content', 'content.[].isTrashed'),\n\n  //why is this on the folders (plural controller?) and not the folder model/controller\n  siblings: function(folder, above) {\n    var controller = this,\n        workspace = controller.get('currentWorkspace'),\n        parentID = (folder.get('parent')) ? folder.get('parent').get('id') : null,\n        weight = folder.get('weight'),\n        workspaceFolders = workspace.get('folders')\n          .filterBy('parent.id', parentID)\n          .sortBy('weight', 'name');\n    \n    var pos = workspaceFolders.indexOf(folder);\n    var siblingsAbove = workspaceFolders.slice(0, pos);\n    var siblingsBelow = workspaceFolders.slice(pos+1, workspaceFolders.length);\n\n    return (above) ? siblingsAbove : siblingsBelow;  \n  }, \n/*\n  reweigh: function() {\n    this.get('filteredContent').\n*/\n  actions: {\n    activateEditFolderMode: function() {\n      this.set('editFolderMode', true);\n    },\n\n    cancelEditFolderMode: function() {\n      this.set('editFolderMode', false);\n    },\n\n    putInFolder: function(folder, type, obj) {\n      var controller = this;\n      var workspaceController = controller.get('controllers.workspace');\n      var error = \"We don't support dropping %@ objects in folders.\";\n\n      Ember.run(function() {\n        switch(type) {\n        case 'selection':\n          workspaceController.send('putSelectionInFolder', folder, obj);\n          break;\n        case 'folder':\n          controller.propertyWillChange('content');\n          workspaceController.send('putFolderInFolder', folder, obj);\n          controller.propertyDidChange('content');\n          break;\n        default:\n          console.info(error.fmt(type));\n        }\n      });\n    },\n\n    putInWorkspace: function(obj) {\n      var controller = this;\n      var workspaceController = controller.get('controllers.workspace');\n\n      Ember.run(function() {\n        controller.propertyWillChange('content');\n        workspaceController.send('putFolderInWorkspace', obj);\n        controller.propertyDidChange('content');\n      });\n    },\n\n    moveUp: function(folder) {\n      var controller = this,\n          weight = folder.get('weight'),\n          siblings = controller.siblings(folder, true),\n          anchor = controller.get('weighting'),\n          min = siblings.get('lastObject.weight');\n\n      controller.propertyWillChange('content');\n      //console.debug(siblings.length);\n\n      if(siblings.length > 0) { //re-order only if there are siblings above\n        if (weight !== min) { // swap the two folders' weights if they are different\n          folder.set('weight', min);\n          siblings.get('lastObject').set('weight', weight);\n          folder.save();\n          \n          siblings.get('lastObject').save();\n        } else {\n          folder.set('weight', (weight - anchor));\n          folder.save();\n          \n          // need to also increment the siblings below the one\n          // this folder is switching with, so they stay below it\n          siblings.forEach( function(sibling, index){\n            if( index !== 0 ){\n              var w = sibling.get('weight');\n              sibling.set('weight', (w + anchor));\n              sibling.save();\n            }\n          });\n        }\n      }\n      \n      controller.propertyDidChange('content');\n    },\n\n    moveDown: function(folder) {\n      var controller = this,\n          weight = folder.get('weight'),\n          siblings = controller.siblings(folder, false),\n          anchor = controller.get('weighting'),\n          max = siblings.get('firstObject.weight');\n\n\n      controller.propertyWillChange('content');\n      //console.debug(siblings.length);\n\n      if(siblings.length > 0) { //re-order only if there are siblings below\n        if (weight !== max) { // swap the two folders' weights if they are different\n          folder.set('weight', max);\n          folder.save();\n\n          siblings.get('firstObject').set('weight', weight);\n          siblings.get('firstObject').save();\n        } else {\n          folder.set('weight', (weight + anchor));\n          folder.save();\n\n          // need to also increment the siblings below the one\n          // this folder is switching with, so they stay below it\n          siblings.forEach( function(sibling, index){\n            if( index !== 0 ){\n              var w = sibling.get('weight');\n              sibling.set('weight', (w + anchor));\n              sibling.save();\n            }\n          });\n        }\n      }\n\n      controller.propertyDidChange('content');\n    },\n\n    moveOut: function(folder) {\n      var controller = this,\n          parent = folder.get('parent'),\n          newParent = parent.get('parent'),\n          weight = parent.get('weight'),\n          anchor = controller.get('weighting'),\n          copy;\n\n      controller.propertyWillChange('content');\n\n      if(parent) { // move out only if this is a nested folder\n        parent.get('children').removeObject(folder);\n        \n        if(Ember.isNone(newParent)) {\n          folder.set('isTopLevel', true);\n        }\n        else {\n          folder.set('isTopLevel', false);\n          newParent.get('children').addObject(folder);\n        }\n\n        folder.save();\n      }\n      \n      controller.propertyDidChange('content');\n    },\n    editFolderName: function() {\n      console.log('folder name edited');\n      //handling the event that was bubbled in the itemController to avoid an error\n      // not sure why we need to do this since it works for simpler cases\n      //see folder_controller\n    }\n  }\n});\n"]}