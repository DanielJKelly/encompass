{"version":3,"sources":["../../../app/mixins/cacheable_models.js"],"names":["Encompass","CacheableModels","Ember","Mixin","create","since","model","metadataFor","sinceToken","cacheExpired","options","lastRetrieval","Date","getTime","now","diff","expiration","cache","defaults","bypass","_","cached","peekAll","notCached","findAll","DS","PromiseArray","promise","RSVP","Promise","resolve","reject"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;AAiBAA,UAAUC,eAAV,GAA4BC,MAAMC,KAAN,CAAYC,MAAZ,CAAmB;AAC7CC,SAAO,eAASC,KAAT,EAAgB;AACrB;AACA;AACA,QAAID,QAAQ,KAAKE,WAAL,CAAiBD,KAAjB,EAAwBE,UAApC;AACA,WAAOH,KAAP;AACD,GAN4C;AAO7CI,gBAAc,sBAASH,KAAT,EAAgBI,OAAhB,EAAyB;AACrC,QAAID,eAAe,KAAnB;AACA,QAAIE,gBAAgB,KAAKN,KAAL,CAAWC,KAAX,CAApB;AACA,QAAGK,aAAH,EAAkB;AAChBA,sBAAgB,IAAIC,IAAJ,CAASD,aAAT,EAAwBE,OAAxB,KAAoC,IAApD,CADgB,CAC0C;AAC1D,UAAIC,MAAQ,IAAIF,IAAJ,GAAWC,OAAX,KAAuB,IAAnC;AACA,UAAIE,OAAQD,MAAMH,aAAlB;AACA,UAAGI,OAAOL,QAAQM,UAAlB,EAA8B;AAC5BP,uBAAe,IAAf;AACD;AACF;AACD,WAAOA,YAAP;AACD,GAnB4C;AAoB7CQ,SAAO,eAASX,KAAT,EAAgBI,OAAhB,EAAyB;AAC9B,QAAIQ,WAAW;AACbF,kBAAY,GADC;AAEbG,cAAQ;AAFK,KAAf;AAIA,QAAG,CAACT,OAAJ,EAAY;AAAEA,gBAAU,EAAV;AAAe;AAC7BU,MAAEF,QAAF,CAAWR,OAAX,EAAoBQ,QAApB;;AAEA,QAAIG,SAAS,KAAKC,OAAL,CAAa,WAAb,CAAb;;AAEA,QAAIb,eAAe,KAAKA,YAAL,CAAkBH,KAAlB,EAAyBI,OAAzB,CAAnB;AACA,QAAIa,YAAe,CAAC,KAAKlB,KAAL,CAAWC,KAAX,CAApB;;AAEA,QAAGiB,aAAad,YAAb,IAA6BC,QAAQS,MAAxC,EAAgD;AAC9C,aAAO,KAAKK,OAAL,CAAalB,KAAb,CAAP;AACD;;AAED,WAAOmB,GAAGC,YAAH,CAAgBtB,MAAhB,CAAuB;AAC5BuB,eAAS,IAAIzB,MAAM0B,IAAN,CAAWC,OAAf,CAAuB,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACxDD,gBAAQT,MAAR;AACD,OAFQ;AADmB,KAAvB,CAAP;AAKD;AA1C4C,CAAnB,CAA5B","file":"cacheable_models.js","sourcesContent":["/**\n  * # Cacheable Models Mixin\n  * @description adds a cache method to the DS.Store (when mixed in) that chooses \n  *   between store.all() and store.find()\n  *   this uses the meta sinceToken from the server response\n  *   the server needs to send this (and should only send it for findAll operations)\n  * @return {PromiseArray} wrapping either store.all (if cached) or store.find(model) (findAll)\n  * @param {String} model - the model you are looking for (eg 'workspace')\n  * @param {Object} options \n    {\n      expiration: 180, //max age in seconds of the last findAll, if greater, we'll update the store\n      bypass: false    //ignore the cache, force a findAll\n    }\n  * does not cache zero results\n  * @author Amir Tahvildaran <amir@mathforum.org>\n  * @since 1.0.2\n  */\nEncompass.CacheableModels = Ember.Mixin.create({\n  since: function(model) {\n    //var meta = model.get('meta');\n    //var since = meta.sinceToken; //this.metadataFor(model).sinceToken;\n    var since = this.metadataFor(model).sinceToken;\n    return since;\n  },\n  cacheExpired: function(model, options) {\n    var cacheExpired = false;\n    var lastRetrieval = this.since(model);\n    if(lastRetrieval) {\n      lastRetrieval = new Date(lastRetrieval).getTime() / 1000; //seconds\n      var now   = new Date().getTime() / 1000;\n      var diff  = now - lastRetrieval;\n      if(diff > options.expiration) {\n        cacheExpired = true;\n      }\n    }\n    return cacheExpired;\n  },\n  cache: function(model, options) {\n    var defaults = {\n      expiration: 180,\n      bypass: false\n    };\n    if(!options){ options = {}; }\n    _.defaults(options, defaults);\n\n    var cached = this.peekAll('workspace');\n\n    var cacheExpired = this.cacheExpired(model, options);\n    var notCached    = !this.since(model);\n\n    if(notCached || cacheExpired || options.bypass) {\n      return this.findAll(model);\n    }\n\n    return DS.PromiseArray.create({\n      promise: new Ember.RSVP.Promise(function(resolve, reject) {\n        resolve(cached);\n      })\n    });\n  }\n});\n"]}