{"version":3,"sources":["../../../app/components/folder-elem.js"],"names":["Encompass","FolderElemComponent","Ember","Component","extend","DragNDrop","Droppable","Draggable","tagName","classNames","containsCurrentSubmission","model","get","includes","property","supportedTypes","selection","folder","dragEnter","aliasMethod","dragOver","dragLeave","dragEnd","onDrag","event","view","document","getElementById","elementId","style","backgroundColor","window","preventDefault","dragStart","dataTransfer","originalEvent","folderId","_super","setData","JSON","stringify","stopPropagation","onDrop","drop","packet","dropType","getData","dropObject","hasOwnProperty","run","next","putInFolder","parentNode","type","data","console","log","obj","parse","hasSelection","id","info","sendAction","propertyWillChange","putFolderInFolder","propertyDidChange","putSelectionInFolder","child","parent","droppedFolder","parentOfDropped","iterator","folders","folderList","filterBy","then","children","removeObject","set","pushObject","save","actions","toggle","editFolderName","confirmDelete","showFolder"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;AAiBAA,UAAUC,mBAAV,GAAgCC,MAAMC,SAAN,CAAgBC,MAAhB,CAAuBJ,UAAUK,SAAV,CAAoBC,SAA3C,EAAsDN,UAAUK,SAAV,CAAoBE,SAA1E,EAAqF;AACnHC,WAAS,IAD0G;AAEnHC,cAAY,CAAC,YAAD,CAFuG;AAGnH;;AAEAC,6BAA2B,YAAU;AACnC,WAAO,KAAKC,KAAL,CAAWC,GAAX,CAAe,aAAf,EAA8BC,QAA9B,CAAuC,KAAKD,GAAL,CAAS,mBAAT,CAAvC,CAAP;AACD,GAF0B,CAEzBE,QAFyB,CAEhB,mBAFgB,EAEK,mBAFL,CALwF;;AASnH;AACAC,kBAAgB;AACdC,eAAW,4EADG;AAEdC,YAAQ,QAFM,CAEG;AAFH,GAVmG;AAcnHC,aAAWhB,MAAMiB,WAAN,CAAkB,QAAlB,CAdwG;AAenHC,YAAUlB,MAAMiB,WAAN,CAAkB,QAAlB,CAfyG;AAgBnHE,aAAWnB,MAAMiB,WAAN,CAAkB,QAAlB,CAhBwG;AAiBnHG,WAASpB,MAAMiB,WAAN,CAAkB,QAAlB,CAjB0G;;AAmBnHI,UAAQ,gBAASC,KAAT,EAAgB;AACtB,QAAIC,OAAO,IAAX;AACAC,aAASC,cAAT,CAAwB,KAAKC,SAA7B,EAAwCC,KAAxC,CAA8CC,eAA9C,GAAgE,oBAAhE;AACAN,YAAQA,SAASO,OAAOP,KAAxB;AACAA,UAAMQ,cAAN;;AAEA,WAAO,KAAP;AACD,GA1BkH;;AA4BnHC,aAAW,mBAAST,KAAT,EAAgB;AACzB,QAAIU,eAAeV,MAAMW,aAAN,CAAoBD,YAAvC;AACA,QAAIE,WAAW,KAAKzB,KAAL,CAAWC,GAAX,CAAe,IAAf,CAAf;;AAEA,SAAKyB,MAAL,CAAYb,KAAZ;AACA;AACAU,iBAAaI,OAAb,CAAqB,kBAArB,EAAyCC,KAAKC,SAAL,CAAgB,EAAC,MAAMJ,QAAP,EAAhB,CAAzC;AACA;AACAF,iBAAaI,OAAb,CAAqB,YAArB,EAAmC,QAAnC;AACAd,UAAMiB,eAAN;AACD,GAtCkH;;AAwCnHC,UAAQ,gBAASlB,KAAT,EAAgB;AACtB,QAAIC,OAAO,IAAX;AACAC,aAASC,cAAT,CAAwB,KAAKC,SAA7B,EAAwCC,KAAxC,CAA8CC,eAA9C,GAAgE,aAAhE;AACAN,YAAQA,SAASO,OAAOP,KAAxB;AACAA,UAAMQ,cAAN;;AAEA,WAAO,KAAP;AACD,GA/CkH;;AAiDnHW,QAAM,cAASnB,KAAT,EAAgB;AACpB,QAAIoB,SAASpB,MAAMW,aAAnB;AACA,QAAIU,WAAWD,OAAOV,YAAP,CAAoBY,OAApB,CAA4B,YAA5B,CAAf;AACA,QAAIC,aAAavB,MAAMU,YAAN,CAAmBY,OAAnB,CAA2B,kBAA3B,CAAjB;;AAEA,QAAK,KAAK/B,cAAL,CAAoBiC,cAApB,CAAmCH,QAAnC,CAAL,EAAoD;AAClD3C,YAAM+C,GAAN,CAAUC,IAAV,CAAe,IAAf,EAAqB,YAAW;AAC9B,aAAKC,WAAL,CAAiB,KAAKxC,KAAtB,EAA6BkC,QAA7B,EAAuCE,UAAvC;AACD,OAFD;AAGD;;AAEDrB,aAASC,cAAT,CAAwB,KAAKC,SAA7B,EAAwCwB,UAAxC,CAAmDvB,KAAnD,CAAyDC,eAAzD,GAA2E,aAA3E;AACA,WAAO,KAAKO,MAAL,CAAYb,KAAZ,CAAP;AACD,GA9DkH;;AAgEnH2B,eAAa,qBAASlC,MAAT,EAAiBoC,IAAjB,EAAuBC,IAAvB,EAA6B;AACxCC,YAAQC,GAAR,CAAY,eAAZ;AACA,QAAIC,MAAMlB,KAAKmB,KAAL,CAAWJ,IAAX,CAAV;;AAEA,QAAI,KAAK3C,KAAL,CAAWgD,YAAX,CAAwBF,IAAIG,EAA5B,CAAJ,EAAsC;AACpCL,cAAQM,IAAR,CAAa,8BAAb;AACA;AACD;;AAED,QAAIR,SAAS,WAAb,EAA0B;AACxBE,cAAQC,GAAR,CAAY,yBAAZ;AACA,WAAKM,UAAL,CAAgB,SAAhB,EAA2BL,IAAIG,EAA/B,EAAmC,KAAKjD,KAAxC;AACD,KAHD,MAGO,IAAI0C,SAAS,QAAb,EAAuB;AAC5B,WAAKU,kBAAL,CAAwB,OAAxB;AACA,WAAKC,iBAAL,CAAuBP,GAAvB,EAA4B,KAAK9C,KAAjC;AACA,WAAKsD,iBAAL,CAAuB,OAAvB;AACD,KAJM,MAIA;AACLV,cAAQM,IAAR,CAAa,+BAA+BR,IAA/B,GAAsC,qBAAnD;AACD;AACF,GAnFkH;;AAqFnHa,wBAAsB,8BAASN,EAAT,EAAa3C,MAAb,EAAqB;AACzCsC,YAAQC,GAAR,CAAY,uCAAZ;AACD,GAvFkH;;AAyFnHQ,qBAAmB,2BAASG,KAAT,EAAgBC,MAAhB,EAAwB;AACzCb,YAAQC,GAAR,CAAY,gBAAgBW,MAAMP,EAAtB,GAA2B,QAA3B,GAAsC,KAAKjD,KAAL,CAAWC,GAAX,CAAe,MAAf,CAAlD;AACA,QAAIyD,gBAAgB,KAApB;AACA,QAAIC,kBAAkB,KAAtB;AACA,QAAIC,WAAcH,MAAlB;;AAEA,QAAID,MAAMP,EAAN,KAAa,KAAKjD,KAAL,CAAWC,GAAX,CAAe,IAAf,CAAjB,EAAuC;AACrC2C,cAAQM,IAAR,CAAa,uCAAb;AACA;AACD;;AAED,QAAIW,UAAU,KAAKC,UAAL,CAAgB7D,GAAhB,CAAoB,SAApB,CAAd;AACAyD,oBAAgBG,QAAQE,QAAR,CAAiB,IAAjB,EAAuBP,MAAMP,EAA7B,EAAiChD,GAAjC,CAAqC,aAArC,CAAhB;;AAEA,QAAI,CAACyD,aAAL,EAAoB;AAClBd,cAAQM,IAAR,CAAa,2CAAb;AACA;AACD;;AAED;AACA,WAAQU,SAAS3D,GAAT,CAAa,QAAb,CAAR,EAAiC;AAC/B2D,iBAAWA,SAAS3D,GAAT,CAAa,QAAb,CAAX;;AAEA,UAAI2D,SAAS3D,GAAT,CAAa,IAAb,MAAuByD,cAAczD,GAAd,CAAkB,IAAlB,CAA3B,EAAoD;AAClD2C,gBAAQM,IAAR,CAAa,sDAAb;AACA;AACD;AACF;;AAED;AACA,QAAIQ,cAAczD,GAAd,CAAkB,QAAlB,CAAJ,EAAiC;AAC/B0D,wBAAkBE,QAAQE,QAAR,CAAiB,IAAjB,EAAuBL,cAAczD,GAAd,CAAkB,QAAlB,EAA4BA,GAA5B,CAAgC,IAAhC,CAAvB,EAA8DA,GAA9D,CAAkE,aAAlE,CAAlB;AACD;;AAGD,QAAI0D,eAAJ,EAAqB;AACnBA,sBAAgB1D,GAAhB,CAAoB,UAApB,EAAgC+D,IAAhC,CAAqC,UAASC,QAAT,EAAmB;AACtDA,iBAASC,YAAT,CAAsBR,aAAtB;AACD,OAFD;AAGD;;AAEDA,kBAAcS,GAAd,CAAkB,QAAlB,EAA4BV,MAA5B;;AAEAA,WAAOxD,GAAP,CAAW,UAAX,EAAuB+D,IAAvB,CAA4B,UAASC,QAAT,EAAmB;AAC7CA,eAASG,UAAT,CAAoBV,aAApB;AACD,KAFD;;AAIAA,kBAAcW,IAAd;AACD,GAzIkH;;AA2InHC,WAAS;AACPC,YAAQ,kBAAW;AACjB3B,cAAQC,GAAR,CAAY,mBAAmB,KAAK7C,KAAL,CAAWC,GAAX,CAAe,MAAf,CAA/B;AACA,WAAKkE,GAAL,CAAS,kBAAT,EAA6B,CAAC,KAAKlE,GAAL,CAAS,kBAAT,CAA9B;AACA2C,cAAQC,GAAR,CAAY,0BAA0B,KAAK7C,KAAL,CAAWC,GAAX,CAAe,YAAf,CAAtC;AACD,KALM;;AAOPuE,oBAAgB,0BAAW;AACzB,UAAIlE,SAAS,KAAKL,GAAL,CAAS,OAAT,CAAb;AACA,UAAGK,OAAOL,GAAP,CAAW,oBAAX,CAAH,EAAqC;AACnCK,eAAOL,GAAP,CAAW,WAAX,EAAwB+D,IAAxB,CAA6B,YAAU;AACrC1D,iBAAO+D,IAAP,GADqC,CACtB;AAChB,SAFD;AAGD;;AAED,aAAO,IAAP,CARyB,CAQZ;AACb;AACA;AACD,KAlBM;;AAoBPI,mBAAe,yBAAU;AACvB,WAAKtB,UAAL,CAAiB,SAAjB,EAA4B,KAAKnD,KAAjC;AACD,KAtBM;;AAwBP0E,gBAAY,sBAAW;AACrB9B,cAAQC,GAAR,CAAY,cAAZ;AACD;AA1BM;AA3I0G,CAArF,CAAhC","file":"folder-elem.js","sourcesContent":["/**\n * A draggable, droppoable folder element. Can hold selections, or other folders.\n *\n * Passed in from parent:\n * - model: The folder model for this component.\n * - currentWorkspace: The current workspace model.\n * - folderList: The paren component for this folder (may be able to get rid of that, or pass in an action)\n * - editFolerMode\n * - dropped: The action to trigger when something is dropped on this folder.\n *\n * TODO:\n * x showFolder\n * - onDrag styles should use classNameBindings\n * x Bubble up the fileSelectionInFolder event to the route (pass the action in the template, then in folder list, send it up again).\n * - Replace folderList reference with a passed in action.\n * - drag folder out, then put back in - it won't go back in until you refresh.  Ember seems to be sending the correct data to the server api.\n */\nEncompass.FolderElemComponent = Ember.Component.extend(Encompass.DragNDrop.Droppable, Encompass.DragNDrop.Draggable, {\n  tagName: 'li',\n  classNames: ['folderItem'],\n  //editFolderMode: true, // (from folder controller)\n\n  containsCurrentSubmission: function(){\n    return this.model.get('submissions').includes(this.get('currentSubmission'));\n  }.property('submissions.[].id', 'currentSubmission'),\n\n  /* Drag and drop stuff */\n  supportedTypes: {\n    selection: /^http:\\/\\/.*\\/#\\/workspaces\\/[0-9a-f]*\\/submissions\\/[0-9a-f]*\\/selections/,\n    folder: /^ember/ // We assume all other droppable ember objects are folders\n  },\n  dragEnter: Ember.aliasMethod('onDrag'), \n  dragOver: Ember.aliasMethod('onDrag'),\n  dragLeave: Ember.aliasMethod('onDrop'),\n  dragEnd: Ember.aliasMethod('onDrop'),\n\n  onDrag: function(event) {\n    var view = this;\n    document.getElementById(this.elementId).style.backgroundColor = 'rgb(255, 255, 255)';\n    event = event || window.event;\n    event.preventDefault();\n    \n    return false;\n  },\n\n  dragStart: function(event) {\n    var dataTransfer = event.originalEvent.dataTransfer;\n    var folderId = this.model.get('id');\n\n    this._super(event);\n    // Get the id of the dragged folder\n    dataTransfer.setData('application/json', JSON.stringify( {'id': folderId} ));\n    // Notify the drop target that a folder is being dropped\n    dataTransfer.setData('text/plain', 'folder');\n    event.stopPropagation();\n  },\n  \n  onDrop: function(event) {\n    var view = this;\n    document.getElementById(this.elementId).style.backgroundColor = 'transparent';\n    event = event || window.event;\n    event.preventDefault();\n    \n    return false;\n  },\n\n  drop: function(event) {\n    var packet = event.originalEvent;\n    var dropType = packet.dataTransfer.getData('text/plain');\n    var dropObject = event.dataTransfer.getData('application/json');\n   \n    if ( this.supportedTypes.hasOwnProperty(dropType) ) {\n      Ember.run.next(this, function() {\n        this.putInFolder(this.model, dropType, dropObject);\n      });\n    }\n\n    document.getElementById(this.elementId).parentNode.style.backgroundColor = 'transparent';\n    return this._super(event);\n  },\n\n  putInFolder: function(folder, type, data) {\n    console.log(\"Put in folder\");\n    var obj = JSON.parse(data);\n\n    if( this.model.hasSelection(obj.id) ) {\n      console.info('folder already has selection');\n      return;\n    }\n\n    if( type === \"selection\" ){\n      console.log(\"Put SELECTION in folder\");\n      this.sendAction('dropped', obj.id, this.model);\n    } else if( type === \"folder\" ){\n      this.propertyWillChange('model');\n      this.putFolderInFolder(obj, this.model);\n      this.propertyDidChange('model');\n    } else {\n      console.info(\"we don't support dropping \" + type + \" objects in folders\");\n    }\n  },\n\n  putSelectionInFolder: function(id, folder) {\n    console.log(\"Put selection (folder-elem) in folder\");\n  },\n\n  putFolderInFolder: function(child, parent) {\n    console.log(\"Put folder \" + child.id + \" into \" + this.model.get('name') );\n    var droppedFolder = false;\n    var parentOfDropped = false;\n    var iterator    = parent;\n\n    if (child.id === this.model.get('id')) {\n      console.info('You cannot drop a folder into itself.');\n      return;\n    }\n\n    var folders = this.folderList.get('folders');\n    droppedFolder = folders.filterBy('id', child.id).get('firstObject');\n\n    if (!droppedFolder) {\n      console.info('Could not retrieve the folder\\'s model...');\n      return;\n    }\n\n    // look from the bottom up to see if parent is a descendent of child\n    while ( iterator.get('parent') ) {\n      iterator = iterator.get('parent');\n\n      if (iterator.get('id') === droppedFolder.get('id')) {\n        console.info('You cannot drop a folder into one of its subfolders.');\n        return;\n      }\n    }\n\n    // get parent of the folder being dropped\n    if (droppedFolder.get('parent')) {\n      parentOfDropped = folders.filterBy('id', droppedFolder.get('parent').get('id')).get('firstObject');\n    }\n\n    \n    if (parentOfDropped) {\n      parentOfDropped.get('children').then(function(children) {\n        children.removeObject(droppedFolder);\n      });\n    }\n\n    droppedFolder.set('parent', parent);\n    \n    parent.get('children').then(function(children) {\n      children.pushObject(droppedFolder);\n    });\n\n    droppedFolder.save();\n  },\n  \n  actions: {\n    toggle: function() {\n      console.log(\"expand folder \" + this.model.get('name') );\n      this.set('model.isExpanded', !this.get('model.isExpanded'));\n      console.log(\"expand folder status \" + this.model.get('isExpanded') );\n    },\n\n    editFolderName: function() {\n      var folder = this.get('model');\n      if(folder.get('hasDirtyAttributes')) {\n        folder.get('workspace').then(function(){\n          folder.save(); //we need the workspace to be populated\n        });\n      }\n\n      return true; //bubbling the event so that if the user clicks into another input it takes\n      //we'll handle the event further up to dismiss it so it doesn't cause an \n      //error\n    },\n\n    confirmDelete: function(){\n      this.sendAction( 'confirm', this.model );\n    },\n\n    showFolder: function() {\n      console.log(\"Show folder!\");\n    }\n  }\n});\n\n"]}