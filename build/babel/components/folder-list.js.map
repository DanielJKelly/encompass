{"version":3,"sources":["../../../app/components/folder-list.js"],"names":["Encompass","FolderListComponent","Ember","Component","extend","hideNewFolderModal","hideDeleteFolderModal","weighting","editFolderMode","canManageFolders","sortProperties","filteredFolders","folders","filterBy","property","sortedFolders","computed","sort","siblings","folder","above","parentID","get","weight","workspaceFolders","sortBy","pos","indexOf","siblingsAbove","slice","siblingsBelow","length","actions","openModal","modalName","console","log","set","createFolder","folderName","ws","workspace","store","createRecord","name","save","askToDelete","confirmDelete","fileSelectionInFolder","objId","sendAction","testAction","folderTest","activateEditFolderMode","cancelEditFolderMode","moveOut","parent","newParent","anchor","copy","removeObject","addObject","moveUp","min","forEach","sibling","index","w","moveDown","max"],"mappings":"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","file":"folder-list.js","sourcesContent":["/**\n * Passed in from parent:\n * - folders\n * - workspace (the current workspace)\n * - currentUser\n * - fileSelection (action)\n * - store: The data store for adding new folders.\n *\n * TODO:\n * - putInFolder (needs drag n drop)\n * - putInWorkspace (is this really used?)\n * - openModal action to add a new folder\n */\nEncompass.FolderListComponent = Ember.Component.extend({\n  hideNewFolderModal: true,\n  hideDeleteFolderModal: true,\n  weighting: 1,\n  editFolderMode: false,\n  canManageFolders: true,\n  sortProperties: ['weight', 'name'],\n  /*\n  canManageFolders: function() {\n    return Permissions.userCan(\n      this.get('currentUser'),\n      this.get('currentWorkspace'),\n      \"FOLDERS\"\n    );\n  }.property('currentUser', 'workspace.owner', 'workspace.editors.[].username'),\n  */\n\n  filteredFolders: function() {\n    return this.folders\n      .filterBy('isTrashed', false)\n      .filterBy('parent.content', null);\n\n    /*\n    var sortedFolders = filteredFolders.sortBy(\"weight name\");\n    var sortedContent = Ember.ArrayProxy.createWithMixins(Ember.SortableMixin,\n      { content: filteredContent, sortProperties: this.sortProperties });\n      */\n    //return filteredFolders;\n  }.property('folders.[]', 'folders.@each.{isTrashed,parent}'),\n\n  sortedFolders: Ember.computed.sort('filteredFolders', 'sortProperties'),\n\n  siblings: function(folder, above) {\n        //workspace = controller.get('currentWorkspace'),\n    var parentID = (folder.get('parent')) ? folder.get('parent').get('id') : null;\n    var weight = folder.get('weight');\n    var workspaceFolders = this.folders\n          .filterBy('parent.id', parentID)\n          .sortBy('weight', 'name');\n    \n    var pos = workspaceFolders.indexOf(folder);\n    var siblingsAbove = workspaceFolders.slice(0, pos);\n    var siblingsBelow = workspaceFolders.slice(pos+1, workspaceFolders.length);\n\n    return (above) ? siblingsAbove : siblingsBelow;  \n  }, \n  \n  actions: {\n    openModal: function( modalName ){\n      console.log(\"Open Modal: \" + modalName );\n      this.set( 'hideNewFolderModal', false );\n    },\n\n    createFolder: function( folderName ){\n      console.log(\"Create folder named: \" + folderName );\n      var ws = this.workspace;\n\n      if( folderName ) {\n        var folder = this.store.createRecord('folder', {\n          name: folderName,\n          workspace: ws,\n          weight: 0\n        });\n\n        folder.save();\n      }\n    },\n\n    askToDelete: function( folder ){\n      this.set( 'folderToDelete', folder );\n      this.set( 'hideDeleteFolderModal', false );\n    },\n\n    confirmDelete: function(){\n      var folder = this.get( 'folderToDelete' );\n      folder.set('isTrashed', true);\n      folder.save();\n    },\n    \n    fileSelectionInFolder: function(objId, folder){\n      console.log(\"Folder List File Selection Action: \" + objId +\" in folder \" + folder.get('name') );\n      this.sendAction( 'fileSelection', objId, folder );\n    },\n\n    testAction: function(){\n      console.log(\"Test clicked: \" + this.folderTest );\n    },\n\n    activateEditFolderMode: function() {\n      this.set('editFolderMode', true);\n    },\n\n    cancelEditFolderMode: function() {\n      this.set('editFolderMode', false);\n    },\n    \n    moveOut: function(folder) {\n      console.log(\"Move Out folder List! \" + folder.get('name') );\n      var parent = folder.get('parent');\n      var newParent = parent.get('parent');\n      var weight = parent.get('weight');\n      var anchor = this.weighting;\n      var copy;\n\n      //controller.propertyWillChange('content');\n      //\n      if(parent) { // move out only if this is a nested folder\n        parent.get('children').removeObject(folder);\n        \n        if( newParent.get(\"isTruthy\") === false  ) {\n          folder.set('isTopLevel', true);\n        }\n        else {\n          folder.set('isTopLevel', false);\n          newParent.get('children').addObject(folder);\n        }\n\n        folder.save();\n      }\n    },\n\n    moveUp: function(folder) {\n      var weight = folder.get('weight');\n      var siblings = this.siblings(folder, true);\n      var anchor = this.weighting;\n      var min = siblings.get('lastObject.weight');\n\n      //console.debug(siblings.length);\n\n      if(siblings.length > 0) { //re-order only if there are siblings above\n        if (weight !== min) { // swap the two folders' weights if they are different\n          folder.set('weight', min);\n          siblings.get('lastObject').set('weight', weight);\n          folder.save();\n          \n          siblings.get('lastObject').save();\n        } else {\n          folder.set('weight', (weight - anchor));\n          folder.save();\n          \n          // need to also increment the siblings below the one\n          // this folder is switching with, so they stay below it\n          siblings.forEach( function(sibling, index){\n            if( index !== 0 ){\n              var w = sibling.get('weight');\n              sibling.set('weight', (w + anchor));\n              sibling.save();\n            }\n          });\n        }\n      }\n    },\n\n    moveDown: function(folder) {\n      var weight = folder.get('weight');\n      var siblings = this.siblings(folder, false);\n      var anchor = this.weighting;\n      var max = siblings.get('firstObject.weight');\n\n      if(siblings.length > 0) { //re-order only if there are siblings below\n        if (weight !== max) { // swap the two folders' weights if they are different\n          folder.set('weight', max);\n          folder.save();\n\n          siblings.get('firstObject').set('weight', weight);\n          siblings.get('firstObject').save();\n        } else {\n          folder.set('weight', (weight + anchor));\n          folder.save();\n\n          // need to also increment the siblings below the one\n          // this folder is switching with, so they stay below it\n          siblings.forEach( function(sibling, index){\n            if( index !== 0 ){\n              var w = sibling.get('weight');\n              sibling.set('weight', (w + anchor));\n              sibling.save();\n            }\n          });\n        }\n      }\n    },\n  }\n});\n\n"]}