{"version":3,"sources":["../../../app/components/workspace-folder-drop.js"],"names":["require","Encompass","WorkspaceFolderDropComponent","Ember","Component","extend","DragNDrop","Droppable","classNames","classNameBindings","dragAction","computed","get","set","key","value","property","drop","event","dataTransfer","originalEvent","dropType","getData","dropObject","comp","run","next","putFolderInWorkspace","_super","folderToAdd","folderModel","parentFolder","JSON","parse","folders","filterBy","id","console","info","removeObject","save"],"mappings":";;AAAA;;;;;;AAMAA,QAAQ,0BAAR;;AAEAC,UAAUC,4BAAV,GAAwCC,MAAMC,SAAN,CAAgBC,MAAhB,CAAuBJ,UAAUK,SAAV,CAAoBC,SAA3C,EAAsD;AAC5FC,cAAY,CAAC,YAAD,CADgF;AAE5FC,qBAAmB,CAAC,YAAD,CAFyE;;AAI5F;AACA;AACAC,cAAYP,MAAMQ,QAAN,CAAe;AACzBC,SAAK,eAAU;AACb,aAAO,IAAP;AACD,KAHwB;AAIzBC,SAAK,aAAUC,GAAV,EAAeC,KAAf,EAAsB;AACzB,aAAO,IAAP;AACD;AANwB,GAAf,EAOTC,QAPS,CAOA,aAPA,CANgF;;AAe5FC,QAAM,cAASC,KAAT,EAAgB;AACpB,QAAIC,eAAeD,MAAME,aAAN,CAAoBD,YAAvC;AACA,QAAIE,WAAWF,aAAaG,OAAb,CAAqB,MAArB,CAAf;AACA,QAAIC,aAAaJ,aAAaG,OAAb,CAAqB,kBAArB,CAAjB;AACA,QAAIE,OAAO,IAAX;;AAEA;AACA;AACA,QAAIH,aAAa,QAAjB,EAA2B;AACzBlB,YAAMsB,GAAN,CAAUC,IAAV,CAAeF,IAAf,EAAqB,YAAW;AAC9BA,aAAKG,oBAAL,CAA0BJ,UAA1B;AACD,OAFD;AAGD;;AAED,WAAOC,KAAKI,MAAL,CAAYV,KAAZ,CAAP;AACD,GA9B2F;;AAgC5FS,wBAAsB,8BAASE,WAAT,EAAsB;AAC1C,QAAIC,cAAc,KAAlB;AACA,QAAIC,eAAe,KAAnB;;AAEAF,kBAAcG,KAAKC,KAAL,CAAWJ,WAAX,CAAd;AACAC,kBAAc,KAAKI,OAAL,CAAaC,QAAb,CAAsB,IAAtB,EAA4BN,YAAYO,EAAxC,EAA4CxB,GAA5C,CAAgD,aAAhD,CAAd;;AAEA,QAAI,CAACkB,WAAL,EAAkB;AAChBO,cAAQC,IAAR,CAAa,2CAAb;AACA;AACD;;AAEDP,mBAAeD,YAAYlB,GAAZ,CAAgB,QAAhB,CAAf;;AAEA;AACA,QAAI,CAACmB,YAAL,EAAmB;AACjB;AACD;;AAEDA,iBAAanB,GAAb,CAAiB,UAAjB,EAA6B2B,YAA7B,CAA0CT,WAA1C;AACAA,gBAAYjB,GAAZ,CAAgB,QAAhB,EAA0B,IAA1B;AACAiB,gBAAYjB,GAAZ,CAAgB,YAAhB,EAA8B,IAA9B;AACAiB,gBAAYU,IAAZ;AACD;AAvD2F,CAAtD,CAAxC","file":"workspace-folder-drop.js","sourcesContent":["/**\n * Allow users to drop sub folders onto the workspace to move the folder to the top level.\n *\n * Passed in to this component:\n * - folders: The list of folders for the current workspace\n */\nrequire('app/components/Droppable');\n\nEncompass.WorkspaceFolderDropComponent= Ember.Component.extend(Encompass.DragNDrop.Droppable, {\n  classNames: ['dropTarget'],\n  classNameBindings: ['dragAction'],\n\n  // This will determine which class (if any) you should add to\n  // the view when you are in the process of dragging an item.\n  dragAction: Ember.computed({\n    get: function(){\n      return null;\n    },\n    set: function( key, value ){\n      return null;\n    }\n  }).property('dragContext'),\n  \n  drop: function(event) {\n    var dataTransfer = event.originalEvent.dataTransfer;\n    var dropType = dataTransfer.getData('Text');\n    var dropObject = dataTransfer.getData('application/json');\n    var comp = this;\n\n    // Set view properties\n    // Must be within `Ember.run.next` to always work\n    if (dropType === 'folder') {\n      Ember.run.next(comp, function() {\n        comp.putFolderInWorkspace(dropObject);\n      });\n    }\n\n    return comp._super(event);\n  },\n\n  putFolderInWorkspace: function(folderToAdd) {\n    var folderModel = false;\n    var parentFolder = false;\n\n    folderToAdd = JSON.parse(folderToAdd);\n    folderModel = this.folders.filterBy('id', folderToAdd.id).get('firstObject');\n    \n    if (!folderModel) {\n      console.info('Could not retrieve the folder\\'s model...');\n      return;\n    }\n\n    parentFolder = folderModel.get('parent');\n    \n    // this folder is already at the top level. leave it alone\n    if (!parentFolder) {\n      return;\n    }\n\n    parentFolder.get('children').removeObject(folderModel);\n    folderModel.set('parent', null);\n    folderModel.set('isTopLevel', true);\n    folderModel.save();\n  }\n});\n"]}