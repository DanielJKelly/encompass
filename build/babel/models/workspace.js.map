{"version":3,"sources":["../../../app/models/workspace.js"],"names":["Encompass","Workspace","DS","Model","extend","Auditable","Permission","workspaceId","Ember","computed","alias","name","attr","folders","hasMany","async","submissions","responses","selections","comments","taggings","_collectionLength","collection","ids","length","foldersLength","property","commentsLength","responsesLength","selectionsLength","submissionsLength","editorsLength","firstSubmissionId","firstId","get","firstSubmission","controller","submissionDates","loFmt","lo","hiFmt","hi","tmp","moment","zone","format"],"mappings":"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","file":"workspace.js","sourcesContent":["Encompass.Workspace = DS.Model.extend(Encompass.Auditable, Encompass.Permission, {\n  workspaceId: Ember.computed.alias('id'),\n  name: DS.attr('string'),\n  folders: DS.hasMany('folder', {async: true}),\n  submissions: DS.hasMany('submission', {async: true}),\n  responses:   DS.hasMany('response', {async: true}),\n  selections: DS.hasMany('selection', {async: true}),\n  comments: DS.hasMany('comment', {async: true}),\n  taggings: DS.hasMany('tagging', {async: false}),\n  _collectionLength: function(collection) {\n    // https://stackoverflow.com/questions/35405360/ember-data-show-length-of-a-hasmany-relationship-in-a-template-without-downloadi\n    /*\n    if( this.hasMany( collection ).value() === null ) {\n      return 0;\n    }\n    */\n    return this.hasMany( collection ).ids().length;\n  },\n  foldersLength: Ember.computed(function() {\n    return this._collectionLength('folders');\n  }).property('folders.[]'),\n  commentsLength: Ember.computed(function() {\n    return this._collectionLength('comments');\n  }).property('comments.[]'),\n  responsesLength: Ember.computed(function() {\n    return this._collectionLength('responses');\n  }).property('comments.[]'),\n  selectionsLength: Ember.computed(function() {\n    return this._collectionLength('selections');\n  }).property('selections.[]'),\n  submissionsLength: Ember.computed(function() {\n    var length = this._collectionLength('submissions');\n    return length;\n    //return this._collectionLength('submissions');\n  }).property('submissions.[]'),\n  editorsLength: Ember.computed(function() {\n    return this._collectionLength('editors');\n  }).property('submissions.[]'),\n  firstSubmissionId: function() {\n    var firstId = this.get('data.submissions.firstObject.id');\n    return firstId;\n  }.property('submissions'),\n\n  firstSubmission: function(){\n    var controller = this;\n    //console.log(\"First Sub Id: \" + this.hasMany( collection ).ids().objectAt(0) );\n    return this.hasMany( 'submissions' ).ids()[0];\n    /*\n    var promise = new Ember.RSVP.Promise(function(resolve, reject) {\n      console.log(\"Getting first submission!\");\n      controller.get('submissions').then(function(submissions){\n        console.log(\"Length: \" + submissions.get('length') );\n        var sorted = submissions.sortBy('student', 'createDate');\n        var firstStudent = sorted.get('firstObject.student');\n        var lastRevision = sorted.getEach('student').lastIndexOf(firstStudent);\n\n        return sorted.objectAt(lastRevision);\n      });\n    });\n\n    return promise;\n    */\n  }.property('submissions.[]'),\n\n  submissionDates: function() {\n    var loFmt, lo = this.get('data.submissionSet.description.firstSubmissionDate');\n    var hiFmt, hi = this.get('data.submissionSet.description.lastSubmissionDate');\n    if(lo > hi) {\n      var tmp = lo;\n      lo = hi;\n      hi = tmp;\n    }\n    if(lo && hi){\n      loFmt = moment(lo).zone('us').format('l'); \n      hiFmt = moment(hi).zone('us').format('l');\n      if(loFmt === hiFmt) {\n        return loFmt;\n      }\n      return loFmt + ' - ' + hiFmt;\n    }\n  }.property()\n//  comments: function() {\n//    var allComments = [];\n//    this.get('submissions').forEach(function(submission){\n//      submission.get('selections').forEach(function(selection){\n//        selection.get('comments').forEach(function(comment){\n//          allComments.push(comment);\n//        });\n//      });\n//    });\n//    return allComments;\n//  }.property('submissions.@each.selections.@each.comments.@each')\n\n  /*\n    Observer that will react on item change and will update the storage.\n  */\n  //todoChanged: function() {\n  //  store.update( this );\n  //}.observes( 'title', 'completed' )\n});\n"]}